
1motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800200  000009d6  00000a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008002d2  008002d2  00000b3c  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b8  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000139e  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000418  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ee0  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003dc  00000000  00000000  00003b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003cf  00000000  00000000  00003f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a8c  00000000  00000000  000042df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  00004d6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
   2:	00 00       	nop
   4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
   6:	00 00       	nop
   8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
   a:	00 00       	nop
   c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
   e:	00 00       	nop
  10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
  12:	00 00       	nop
  14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
  16:	00 00       	nop
  18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
  1e:	00 00       	nop
  20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
  22:	00 00       	nop
  24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
  26:	00 00       	nop
  28:	91 c0       	rjmp	.+290    	; 0x14c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8f c0       	rjmp	.+286    	; 0x14c <__bad_interrupt>
  2e:	00 00       	nop
  30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
  32:	00 00       	nop
  34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
  36:	00 00       	nop
  38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
  3e:	00 00       	nop
  40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
  42:	00 00       	nop
  44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
  46:	00 00       	nop
  48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
  4e:	00 00       	nop
  50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
  52:	00 00       	nop
  54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
  56:	00 00       	nop
  58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	77 c0       	rjmp	.+238    	; 0x14c <__bad_interrupt>
  5e:	00 00       	nop
  60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
  62:	00 00       	nop
  64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
  66:	00 00       	nop
  68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
  6e:	00 00       	nop
  70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
  72:	00 00       	nop
  74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
  76:	00 00       	nop
  78:	69 c0       	rjmp	.+210    	; 0x14c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	67 c0       	rjmp	.+206    	; 0x14c <__bad_interrupt>
  7e:	00 00       	nop
  80:	65 c0       	rjmp	.+202    	; 0x14c <__bad_interrupt>
  82:	00 00       	nop
  84:	63 c0       	rjmp	.+198    	; 0x14c <__bad_interrupt>
  86:	00 00       	nop
  88:	61 c0       	rjmp	.+194    	; 0x14c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5f c0       	rjmp	.+190    	; 0x14c <__bad_interrupt>
  8e:	00 00       	nop
  90:	cc c1       	rjmp	.+920    	; 0x42a <__vector_36>
  92:	00 00       	nop
  94:	5b c0       	rjmp	.+182    	; 0x14c <__bad_interrupt>
  96:	00 00       	nop
  98:	59 c0       	rjmp	.+178    	; 0x14c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	57 c0       	rjmp	.+174    	; 0x14c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	55 c0       	rjmp	.+170    	; 0x14c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	53 c0       	rjmp	.+166    	; 0x14c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	51 c0       	rjmp	.+162    	; 0x14c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4f c0       	rjmp	.+158    	; 0x14c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4d c0       	rjmp	.+154    	; 0x14c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	4b c0       	rjmp	.+150    	; 0x14c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	49 c0       	rjmp	.+146    	; 0x14c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	47 c0       	rjmp	.+142    	; 0x14c <__bad_interrupt>
  be:	00 00       	nop
  c0:	45 c0       	rjmp	.+138    	; 0x14c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	43 c0       	rjmp	.+134    	; 0x14c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	04 c2       	rjmp	.+1032   	; 0x4d2 <__vector_50>
  ca:	00 00       	nop
  cc:	3f c0       	rjmp	.+126    	; 0x14c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	3d c0       	rjmp	.+122    	; 0x14c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	3b c0       	rjmp	.+118    	; 0x14c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	39 c0       	rjmp	.+114    	; 0x14c <__bad_interrupt>
  da:	00 00       	nop
  dc:	37 c0       	rjmp	.+110    	; 0x14c <__bad_interrupt>
  de:	00 00       	nop
  e0:	35 c0       	rjmp	.+106    	; 0x14c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	db 02       	muls	r29, r27
  e6:	f3 02       	muls	r31, r19
  e8:	04 03       	mulsu	r16, r20
  ea:	15 03       	mulsu	r17, r21
  ec:	26 03       	mulsu	r18, r22
  ee:	37 03       	mulsu	r19, r23
  f0:	48 03       	fmul	r20, r16
  f2:	59 03       	fmul	r21, r17
  f4:	6b 03       	fmul	r22, r19
  f6:	7d 03       	fmul	r23, r21
  f8:	8e 03       	fmulsu	r16, r22
  fa:	9f 03       	fmulsu	r17, r23
  fc:	b0 03       	fmuls	r19, r16
  fe:	c1 03       	fmuls	r20, r17
 100:	d2 03       	fmuls	r21, r18
 102:	cc 02       	muls	r28, r28
 104:	cc 02       	muls	r28, r28
 106:	e3 03       	fmuls	r22, r19
 108:	f4 03       	fmuls	r23, r20
 10a:	05 04       	cpc	r0, r5
 10c:	16 04       	cpc	r1, r6

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d1 e2       	ldi	r29, 0x21	; 33
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	00 e0       	ldi	r16, 0x00	; 0
 11c:	0c bf       	out	0x3c, r16	; 60

0000011e <__do_copy_data>:
 11e:	12 e0       	ldi	r17, 0x02	; 2
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	b2 e0       	ldi	r27, 0x02	; 2
 124:	e6 ed       	ldi	r30, 0xD6	; 214
 126:	f9 e0       	ldi	r31, 0x09	; 9
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	0b bf       	out	0x3b, r16	; 59
 12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x14>
 12e:	07 90       	elpm	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	a2 3d       	cpi	r26, 0xD2	; 210
 134:	b1 07       	cpc	r27, r17
 136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0x10>

00000138 <__do_clear_bss>:
 138:	22 e0       	ldi	r18, 0x02	; 2
 13a:	a2 ed       	ldi	r26, 0xD2	; 210
 13c:	b2 e0       	ldi	r27, 0x02	; 2
 13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
 140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
 142:	a3 3e       	cpi	r26, 0xE3	; 227
 144:	b2 07       	cpc	r27, r18
 146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
 148:	1b d2       	rcall	.+1078   	; 0x580 <main>
 14a:	43 c4       	rjmp	.+2182   	; 0x9d2 <_exit>

0000014c <__bad_interrupt>:
 14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <init_servo>:
volatile int runflag = 0;
volatile int flag=0,button;
volatile int crap_flag =0;
void init_servo(void)
{ 
	TCCR5A=(1<<COM5B1)|(1<<WGM50);
 14e:	81 e2       	ldi	r24, 0x21	; 33
 150:	80 93 20 01 	sts	0x0120, r24
	TCCR5B=(1<<WGM52)|(1<<CS51)|(1<<CS50);
 154:	8b e0       	ldi	r24, 0x0B	; 11
 156:	80 93 21 01 	sts	0x0121, r24
	OCR5B=128;
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 2b 01 	sts	0x012B, r25
 162:	80 93 2a 01 	sts	0x012A, r24
 166:	08 95       	ret

00000168 <servo>:
}
void servo(int direction,long int angle)
{
	max_count=angle;
 168:	40 93 d7 02 	sts	0x02D7, r20
 16c:	50 93 d8 02 	sts	0x02D8, r21
 170:	60 93 d9 02 	sts	0x02D9, r22
 174:	70 93 da 02 	sts	0x02DA, r23
	if(direction==1)
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	91 05       	cpc	r25, r1
 17c:	31 f4       	brne	.+12     	; 0x18a <servo+0x22>
	PORTL|=0b01000000;
 17e:	eb e0       	ldi	r30, 0x0B	; 11
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
 188:	08 95       	ret
	else if(direction==0)
 18a:	89 2b       	or	r24, r25
 18c:	29 f4       	brne	.+10     	; 0x198 <servo+0x30>
	PORTL &= ~0b01000000;
 18e:	eb e0       	ldi	r30, 0x0B	; 11
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	80 81       	ld	r24, Z
 194:	8f 7b       	andi	r24, 0xBF	; 191
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <init_bot>:
}
void init_bot(void)
{
	DDRB=255;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 b9       	out	0x04, r24	; 4
    TCCR1A|=(1<<COM1A1)|(1<<WGM10);
 19e:	e0 e8       	ldi	r30, 0x80	; 128
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	90 81       	ld	r25, Z
 1a4:	91 68       	ori	r25, 0x81	; 129
 1a6:	90 83       	st	Z, r25
	TCCR1B|=(1<<WGM12)|(1<<CS10)|(1<<CS12);
 1a8:	e1 e8       	ldi	r30, 0x81	; 129
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	90 81       	ld	r25, Z
 1ae:	9d 60       	ori	r25, 0x0D	; 13
 1b0:	90 83       	st	Z, r25
	TCCR2A|=(1<<COM2A1)|(1<<WGM20)|(1<<WGM21);
 1b2:	e0 eb       	ldi	r30, 0xB0	; 176
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	93 68       	ori	r25, 0x83	; 131
 1ba:	90 83       	st	Z, r25
	TCCR2B|=(1<<CS20)|(1<<CS22);
 1bc:	e1 eb       	ldi	r30, 0xB1	; 177
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	95 60       	ori	r25, 0x05	; 5
 1c4:	90 83       	st	Z, r25
	OCR2A=255;
 1c6:	80 93 b3 00 	sts	0x00B3, r24
	OCR1A=255;	
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 89 00 	sts	0x0089, r25
 1d2:	80 93 88 00 	sts	0x0088, r24
 1d6:	08 95       	ret

000001d8 <init_usart>:
}
void init_usart(void)
{
	UBRR1=23;
 1d8:	87 e1       	ldi	r24, 0x17	; 23
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 cd 00 	sts	0x00CD, r25
 1e0:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B|=(1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
 1e4:	e9 ec       	ldi	r30, 0xC9	; 201
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 69       	ori	r24, 0x98	; 152
 1ec:	80 83       	st	Z, r24
	UCSR1C|=(1<<UCSZ11)|(1<<UCSZ10);
 1ee:	ea ec       	ldi	r30, 0xCA	; 202
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	86 60       	ori	r24, 0x06	; 6
 1f6:	80 83       	st	Z, r24
 1f8:	08 95       	ret

000001fa <servo_right>:
}
void servo_right()
{
	DDRL=255;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	80 93 0a 01 	sts	0x010A, r24
	servo(1,1);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ad cf       	rjmp	.-166    	; 0x168 <servo>

0000020e <servo_left>:
}
void servo_left()
{
	DDRL=255;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	80 93 0a 01 	sts	0x010A, r24
	servo(0,1);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	a3 cf       	rjmp	.-186    	; 0x168 <servo>

00000222 <servo_stop>:
}
void servo_stop()
{
	DDRL=0;
 222:	10 92 0a 01 	sts	0x010A, r1
	servo(0,0);
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	ba 01       	movw	r22, r20
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9b cf       	rjmp	.-202    	; 0x168 <servo>

00000232 <Move_Front>:
}
void Move_Front()
{
	PORTB|=0b11110000;//7,6
 232:	85 b1       	in	r24, 0x05	; 5
 234:	80 6f       	ori	r24, 0xF0	; 240
 236:	85 b9       	out	0x05, r24	; 5
 238:	08 95       	ret

0000023a <Move_Right>:
}
void Move_Right()
{
	PORTB|=0b10110011;//7,0
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	83 6b       	ori	r24, 0xB3	; 179
 23e:	85 b9       	out	0x05, r24	; 5
 240:	08 95       	ret

00000242 <Move_Left>:
}
void Move_Left()
{
	PORTB|=0b01110100;//6,2
 242:	85 b1       	in	r24, 0x05	; 5
 244:	84 67       	ori	r24, 0x74	; 116
 246:	85 b9       	out	0x05, r24	; 5
 248:	08 95       	ret

0000024a <Move_Back>:
}
void Move_Back()
{
	PORTB|=0b00110101;//0,2
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	85 63       	ori	r24, 0x35	; 53
 24e:	85 b9       	out	0x05, r24	; 5
 250:	08 95       	ret

00000252 <Move_Stop>:
}
void Move_Stop()
{
	PORTB=0b00000000;//all
 252:	15 b8       	out	0x05, r1	; 5
 254:	08 95       	ret

00000256 <init_actuators_gripper>:
}
void init_actuators_gripper(void)
{
	DDRH = 0xff;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	80 93 01 01 	sts	0x0101, r24
	PORTH &= ~((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4));
 25c:	e2 e0       	ldi	r30, 0x02	; 2
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	90 81       	ld	r25, Z
 262:	90 7e       	andi	r25, 0xE0	; 224
 264:	90 83       	st	Z, r25
	DDRJ =0xff;
 266:	80 93 04 01 	sts	0x0104, r24
	PORTJ &= ~(1<<0); //J0 off
 26a:	e5 e0       	ldi	r30, 0x05	; 5
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	8e 7f       	andi	r24, 0xFE	; 254
 272:	80 83       	st	Z, r24
	DDRE |= (1<<3)|(1<<5)|(1<<7);
 274:	8d b1       	in	r24, 0x0d	; 13
 276:	88 6a       	ori	r24, 0xA8	; 168
 278:	8d b9       	out	0x0d, r24	; 13
	PORTE &= ~((1<<1)|(1<<5)|(1<<7));
 27a:	8e b1       	in	r24, 0x0e	; 14
 27c:	8d 75       	andi	r24, 0x5D	; 93
 27e:	8e b9       	out	0x0e, r24	; 14
 280:	08 95       	ret

00000282 <actuator1_up>:
	
	
}
void actuator1_up(void)
{
	PORTH &= ~(1<<1);		//I1  off
 282:	e2 e0       	ldi	r30, 0x02	; 2
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	80 81       	ld	r24, Z
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	80 83       	st	Z, r24
	PORTH |= (1<<0)|(1<<3);		// I2 on, EN on (3 is enable)
 28c:	80 81       	ld	r24, Z
 28e:	89 60       	ori	r24, 0x09	; 9
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <actuator1_down>:
	
}
void actuator1_down(void)
{
	PORTH &= ~(1<<0);		//I2 off
 294:	e2 e0       	ldi	r30, 0x02	; 2
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	80 81       	ld	r24, Z
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	80 83       	st	Z, r24
	PORTH |= (1<<1)|(1<<3);	//I1 ON, EN on
 29e:	80 81       	ld	r24, Z
 2a0:	8a 60       	ori	r24, 0x0A	; 10
 2a2:	80 83       	st	Z, r24
 2a4:	08 95       	ret

000002a6 <actuator1_stop>:
}
void actuator1_stop(void)
{
	PORTH &= ~((1<<0)|(1<<1)|(1<<3)) ;	//I1 off, I2 off
 2a6:	e2 e0       	ldi	r30, 0x02	; 2
 2a8:	f1 e0       	ldi	r31, 0x01	; 1
 2aa:	80 81       	ld	r24, Z
 2ac:	84 7f       	andi	r24, 0xF4	; 244
 2ae:	80 83       	st	Z, r24
 2b0:	08 95       	ret

000002b2 <actuator2_up>:

}
void actuator2_up(void)
{
	PORTJ |= (1<<0);
 2b2:	e5 e0       	ldi	r30, 0x05	; 5
 2b4:	f1 e0       	ldi	r31, 0x01	; 1
 2b6:	80 81       	ld	r24, Z
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	80 83       	st	Z, r24
	PORTH &= ~(1<<2);
 2bc:	e2 e0       	ldi	r30, 0x02	; 2
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	80 81       	ld	r24, Z
 2c2:	8b 7f       	andi	r24, 0xFB	; 251
 2c4:	80 83       	st	Z, r24
	PORTH |=(1<<4);
 2c6:	80 81       	ld	r24, Z
 2c8:	80 61       	ori	r24, 0x10	; 16
 2ca:	80 83       	st	Z, r24
 2cc:	08 95       	ret

000002ce <actuator2_down>:
	
}
void actuator2_down(void)
{
	PORTH |= (1<<2);
 2ce:	e2 e0       	ldi	r30, 0x02	; 2
 2d0:	f1 e0       	ldi	r31, 0x01	; 1
 2d2:	80 81       	ld	r24, Z
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	80 83       	st	Z, r24
	PORTJ &= ~(1<<0);
 2d8:	a5 e0       	ldi	r26, 0x05	; 5
 2da:	b1 e0       	ldi	r27, 0x01	; 1
 2dc:	8c 91       	ld	r24, X
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	8c 93       	st	X, r24
	PORTH |=(1<<4);
 2e2:	80 81       	ld	r24, Z
 2e4:	80 61       	ori	r24, 0x10	; 16
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <actuator2_stop>:
	
}
void actuator2_stop(void)
{
	PORTJ &= ~(1<<0);
 2ea:	e5 e0       	ldi	r30, 0x05	; 5
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	80 81       	ld	r24, Z
 2f0:	8e 7f       	andi	r24, 0xFE	; 254
 2f2:	80 83       	st	Z, r24
	PORTH &= ~(1<<2);
 2f4:	e2 e0       	ldi	r30, 0x02	; 2
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	80 81       	ld	r24, Z
 2fa:	8b 7f       	andi	r24, 0xFB	; 251
 2fc:	80 83       	st	Z, r24
	PORTH &=~(1<<4);
 2fe:	80 81       	ld	r24, Z
 300:	8f 7e       	andi	r24, 0xEF	; 239
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

00000306 <gripper_clutch_open>:
}
// Gripper Clutch is L298
void gripper_clutch_open(void)
{
	//E3, E5, E7
	PORTE &=~ (1<<3);
 306:	73 98       	cbi	0x0e, 3	; 14
	PORTE |= (1<<5)|(1<<7);
 308:	8e b1       	in	r24, 0x0e	; 14
 30a:	80 6a       	ori	r24, 0xA0	; 160
 30c:	8e b9       	out	0x0e, r24	; 14
 30e:	08 95       	ret

00000310 <gripper_clutch_close>:
}

void gripper_clutch_close(void)
{
	//E3, E5, E7
	PORTE &=~ (1<<5);
 310:	75 98       	cbi	0x0e, 5	; 14
	PORTE |= (1<<3)|(1<<7);
 312:	8e b1       	in	r24, 0x0e	; 14
 314:	88 68       	ori	r24, 0x88	; 136
 316:	8e b9       	out	0x0e, r24	; 14
 318:	08 95       	ret

0000031a <gripper_stop>:
}

void gripper_stop(void)
{
	PORTE &= ~(1<<1)|(1<<5)|(1<<7);
 31a:	71 98       	cbi	0x0e, 1	; 14
 31c:	08 95       	ret

0000031e <init_bomb_clutch>:
}

void init_bomb_clutch()
{
	DDRH |=(1<<5)|(1<<7);
 31e:	e1 e0       	ldi	r30, 0x01	; 1
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	80 81       	ld	r24, Z
 324:	80 6a       	ori	r24, 0xA0	; 160
 326:	80 83       	st	Z, r24
	DDRJ |=(1<<1);
 328:	e4 e0       	ldi	r30, 0x04	; 4
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	80 81       	ld	r24, Z
 32e:	82 60       	ori	r24, 0x02	; 2
 330:	80 83       	st	Z, r24
	PORTH &= ~((1<<5)|(1<<7));
 332:	e2 e0       	ldi	r30, 0x02	; 2
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	80 81       	ld	r24, Z
 338:	8f 75       	andi	r24, 0x5F	; 95
 33a:	80 83       	st	Z, r24
	PORTJ &= ~(1<<1);
 33c:	e5 e0       	ldi	r30, 0x05	; 5
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	80 81       	ld	r24, Z
 342:	8d 7f       	andi	r24, 0xFD	; 253
 344:	80 83       	st	Z, r24
 346:	08 95       	ret

00000348 <bomb_clutch_open>:
}
void bomb_clutch_open(void)
{
	PORTH |= (1<<5);
 348:	e2 e0       	ldi	r30, 0x02	; 2
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	80 81       	ld	r24, Z
 34e:	80 62       	ori	r24, 0x20	; 32
 350:	80 83       	st	Z, r24
	PORTH &= ~(1<<7);
 352:	80 81       	ld	r24, Z
 354:	8f 77       	andi	r24, 0x7F	; 127
 356:	80 83       	st	Z, r24
	PORTJ |= (1<<1);
 358:	e5 e0       	ldi	r30, 0x05	; 5
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	80 81       	ld	r24, Z
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <bomb_clutch_close>:
}

void bomb_clutch_close()
{
	PORTH |= (1<<7);
 364:	e2 e0       	ldi	r30, 0x02	; 2
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	80 81       	ld	r24, Z
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	80 83       	st	Z, r24
	PORTH &= ~(1<<5);
 36e:	80 81       	ld	r24, Z
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	80 83       	st	Z, r24
	PORTJ |= (1<<1);
 374:	e5 e0       	ldi	r30, 0x05	; 5
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	80 81       	ld	r24, Z
 37a:	82 60       	ori	r24, 0x02	; 2
 37c:	80 83       	st	Z, r24
 37e:	08 95       	ret

00000380 <stop_bomb_clutch>:
}

void stop_bomb_clutch()
{
	PORTJ &=~(1<<1);
 380:	e5 e0       	ldi	r30, 0x05	; 5
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	80 81       	ld	r24, Z
 386:	8d 7f       	andi	r24, 0xFD	; 253
 388:	80 83       	st	Z, r24
	PORTH &=~((1<<5)|(1<<7));
 38a:	e2 e0       	ldi	r30, 0x02	; 2
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	80 81       	ld	r24, Z
 390:	8f 75       	andi	r24, 0x5F	; 95
 392:	80 83       	st	Z, r24
 394:	08 95       	ret

00000396 <init_wrist>:
}

void init_wrist()
{
	DDRE|= (1<<2)|(1<<4)|(1<<6);
 396:	8d b1       	in	r24, 0x0d	; 13
 398:	84 65       	ori	r24, 0x54	; 84
 39a:	8d b9       	out	0x0d, r24	; 13
	DDRJ |= (1<<2)|(1<<6);
 39c:	e4 e0       	ldi	r30, 0x04	; 4
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	80 81       	ld	r24, Z
 3a2:	84 64       	ori	r24, 0x44	; 68
 3a4:	80 83       	st	Z, r24
	DDRH |= (1<<6);
 3a6:	e1 e0       	ldi	r30, 0x01	; 1
 3a8:	f1 e0       	ldi	r31, 0x01	; 1
 3aa:	80 81       	ld	r24, Z
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	80 83       	st	Z, r24
	PORTE&=~((1<<2)|(1<<4)|(1<<6));
 3b0:	8e b1       	in	r24, 0x0e	; 14
 3b2:	8b 7a       	andi	r24, 0xAB	; 171
 3b4:	8e b9       	out	0x0e, r24	; 14
	PORTJ &=~((1<<2)|(1<<6));
 3b6:	e5 e0       	ldi	r30, 0x05	; 5
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	80 81       	ld	r24, Z
 3bc:	8b 7b       	andi	r24, 0xBB	; 187
 3be:	80 83       	st	Z, r24
	PORTJ &=~(1<<6);
 3c0:	80 81       	ld	r24, Z
 3c2:	8f 7b       	andi	r24, 0xBF	; 191
 3c4:	80 83       	st	Z, r24
 3c6:	08 95       	ret

000003c8 <rotate_wrist_cw>:
}
void rotate_wrist_cw()
{
		PORTE&=~((1<<2)|(1<<6));
 3c8:	8e b1       	in	r24, 0x0e	; 14
 3ca:	8b 7b       	andi	r24, 0xBB	; 187
 3cc:	8e b9       	out	0x0e, r24	; 14
		PORTE |=(1<<4);
 3ce:	74 9a       	sbi	0x0e, 4	; 14
 3d0:	08 95       	ret

000003d2 <rotate_wrist_ccw>:

}

void rotate_wrist_ccw()
{
	PORTE&=~(1<<6);
 3d2:	76 98       	cbi	0x0e, 6	; 14
	PORTE |=(1<<4)|(1<<2);
 3d4:	8e b1       	in	r24, 0x0e	; 14
 3d6:	84 61       	ori	r24, 0x14	; 20
 3d8:	8e b9       	out	0x0e, r24	; 14
 3da:	08 95       	ret

000003dc <stop_wrist_rotate>:
}
void stop_wrist_rotate()
{
	PORTE&=~(1<<4);
 3dc:	74 98       	cbi	0x0e, 4	; 14
	PORTE |=(1<<6);	
 3de:	76 9a       	sbi	0x0e, 6	; 14
 3e0:	08 95       	ret

000003e2 <wrist_up>:
	
}
void wrist_up()
{
	PORTH |= (1<<6);
 3e2:	e2 e0       	ldi	r30, 0x02	; 2
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	80 81       	ld	r24, Z
 3e8:	80 64       	ori	r24, 0x40	; 64
 3ea:	80 83       	st	Z, r24
	PORTJ &=~((1<<2)|(1<<6))	;
 3ec:	e5 e0       	ldi	r30, 0x05	; 5
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	80 81       	ld	r24, Z
 3f2:	8b 7b       	andi	r24, 0xBB	; 187
 3f4:	80 83       	st	Z, r24
 3f6:	08 95       	ret

000003f8 <wrist_down>:
}

void wrist_down()
{
	PORTH |= (1<<6);
 3f8:	e2 e0       	ldi	r30, 0x02	; 2
 3fa:	f1 e0       	ldi	r31, 0x01	; 1
 3fc:	80 81       	ld	r24, Z
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	80 83       	st	Z, r24
	PORTJ &=~(1<<6);
 402:	e5 e0       	ldi	r30, 0x05	; 5
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	80 81       	ld	r24, Z
 408:	8f 7b       	andi	r24, 0xBF	; 191
 40a:	80 83       	st	Z, r24
	PORTJ|= (1<<2);
 40c:	80 81       	ld	r24, Z
 40e:	84 60       	ori	r24, 0x04	; 4
 410:	80 83       	st	Z, r24
 412:	08 95       	ret

00000414 <stop_wrist_ud>:
}

void stop_wrist_ud()
{
	PORTH&=~(1<<6);
 414:	e2 e0       	ldi	r30, 0x02	; 2
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	80 81       	ld	r24, Z
 41a:	8f 7b       	andi	r24, 0xBF	; 191
 41c:	80 83       	st	Z, r24
	PORTJ |=(1<<6);
 41e:	e5 e0       	ldi	r30, 0x05	; 5
 420:	f1 e0       	ldi	r31, 0x01	; 1
 422:	80 81       	ld	r24, Z
 424:	80 64       	ori	r24, 0x40	; 64
 426:	80 83       	st	Z, r24
 428:	08 95       	ret

0000042a <__vector_36>:
	
}

ISR(USART1_RX_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	0b b6       	in	r0, 0x3b	; 59
 436:	0f 92       	push	r0
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
	 while(((UCSR1A &(1<<RXC1))!=0) && ((UCSR1A &(1<<UDRE1))==0));
 440:	e8 ec       	ldi	r30, 0xC8	; 200
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	88 23       	and	r24, r24
 448:	1c f4       	brge	.+6      	; 0x450 <__vector_36+0x26>
 44a:	80 81       	ld	r24, Z
 44c:	85 ff       	sbrs	r24, 5
 44e:	fa cf       	rjmp	.-12     	; 0x444 <__vector_36+0x1a>
	 data=UDR1;
 450:	80 91 ce 00 	lds	r24, 0x00CE
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	90 93 e2 02 	sts	0x02E2, r25
 45a:	80 93 e1 02 	sts	0x02E1, r24
	 
	if(data==ACKN && flag==0)
 45e:	80 91 e1 02 	lds	r24, 0x02E1
 462:	90 91 e2 02 	lds	r25, 0x02E2
 466:	82 36       	cpi	r24, 0x62	; 98
 468:	91 05       	cpc	r25, r1
 46a:	69 f4       	brne	.+26     	; 0x486 <__vector_36+0x5c>
 46c:	80 91 d4 02 	lds	r24, 0x02D4
 470:	90 91 d5 02 	lds	r25, 0x02D5
 474:	89 2b       	or	r24, r25
 476:	39 f4       	brne	.+14     	; 0x486 <__vector_36+0x5c>
	{
		flag=1;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	90 93 d5 02 	sts	0x02D5, r25
 480:	80 93 d4 02 	sts	0x02D4, r24
 484:	1b c0       	rjmp	.+54     	; 0x4bc <__vector_36+0x92>
		
	}
	else if(flag==1)
 486:	80 91 d4 02 	lds	r24, 0x02D4
 48a:	90 91 d5 02 	lds	r25, 0x02D5
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	a9 f4       	brne	.+42     	; 0x4bc <__vector_36+0x92>
	{
		button=data;
 492:	80 91 e1 02 	lds	r24, 0x02E1
 496:	90 91 e2 02 	lds	r25, 0x02E2
 49a:	90 93 e0 02 	sts	0x02E0, r25
 49e:	80 93 df 02 	sts	0x02DF, r24
		crap_flag =1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 d3 02 	sts	0x02D3, r25
 4aa:	80 93 d2 02 	sts	0x02D2, r24
		flag=0;
 4ae:	10 92 d5 02 	sts	0x02D5, r1
 4b2:	10 92 d4 02 	sts	0x02D4, r1
		data_rxd_flag=1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 93 d6 02 	sts	0x02D6, r24
	}
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	0f 90       	pop	r0
 4c6:	0b be       	out	0x3b, r0	; 59
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <__vector_50>:
ISR(TIMER5_OVF_vect)
{
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
	count++;
 4f4:	40 91 db 02 	lds	r20, 0x02DB
 4f8:	50 91 dc 02 	lds	r21, 0x02DC
 4fc:	60 91 dd 02 	lds	r22, 0x02DD
 500:	70 91 de 02 	lds	r23, 0x02DE
 504:	4f 5f       	subi	r20, 0xFF	; 255
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	6f 4f       	sbci	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	40 93 db 02 	sts	0x02DB, r20
 510:	50 93 dc 02 	sts	0x02DC, r21
 514:	60 93 dd 02 	sts	0x02DD, r22
 518:	70 93 de 02 	sts	0x02DE, r23
	if (count==(max_count*10))
 51c:	80 91 d7 02 	lds	r24, 0x02D7
 520:	90 91 d8 02 	lds	r25, 0x02D8
 524:	a0 91 d9 02 	lds	r26, 0x02D9
 528:	b0 91 da 02 	lds	r27, 0x02DA
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	aa 1f       	adc	r26, r26
 532:	bb 1f       	adc	r27, r27
 534:	8c 01       	movw	r16, r24
 536:	9d 01       	movw	r18, r26
 538:	00 0f       	add	r16, r16
 53a:	11 1f       	adc	r17, r17
 53c:	22 1f       	adc	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	00 0f       	add	r16, r16
 542:	11 1f       	adc	r17, r17
 544:	22 1f       	adc	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	80 0f       	add	r24, r16
 54a:	91 1f       	adc	r25, r17
 54c:	a2 1f       	adc	r26, r18
 54e:	b3 1f       	adc	r27, r19
 550:	48 17       	cp	r20, r24
 552:	59 07       	cpc	r21, r25
 554:	6a 07       	cpc	r22, r26
 556:	7b 07       	cpc	r23, r27
 558:	11 f4       	brne	.+4      	; 0x55e <__vector_50+0x8c>
	{
		DDRL=0;
 55a:	10 92 0a 01 	sts	0x010A, r1
	}	
}
 55e:	bf 91       	pop	r27
 560:	af 91       	pop	r26
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	7f 91       	pop	r23
 568:	6f 91       	pop	r22
 56a:	5f 91       	pop	r21
 56c:	4f 91       	pop	r20
 56e:	3f 91       	pop	r19
 570:	2f 91       	pop	r18
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <main>:
int main()
{
	cli();
 580:	f8 94       	cli
	LCD_INIT(LCD_DISP_ON_CURSOR);
 582:	8e e0       	ldi	r24, 0x0E	; 14
 584:	ef d1       	rcall	.+990    	; 0x964 <LCD_INIT>
	init_servo();
 586:	e3 dd       	rcall	.-1082   	; 0x14e <init_servo>
	init_bot();
 588:	08 de       	rcall	.-1008   	; 0x19a <init_bot>
	init_usart();
 58a:	26 de       	rcall	.-948    	; 0x1d8 <init_usart>
	init_actuators_gripper();
 58c:	64 de       	rcall	.-824    	; 0x256 <init_actuators_gripper>
	init_bomb_clutch();	
 58e:	c7 de       	rcall	.-626    	; 0x31e <init_bomb_clutch>
	init_wrist();	
 590:	02 df       	rcall	.-508    	; 0x396 <init_wrist>
	sei();
 592:	78 94       	sei
	DDRC=255;
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	87 b9       	out	0x07, r24	; 7
		Move_Back();
		_delay_ms(10000);
		Move_Stop();
		_delay_ms(2000);
		*/
		if(data_rxd_flag)
 598:	80 91 d6 02 	lds	r24, 0x02D6
 59c:	88 23       	and	r24, r24
 59e:	e1 f3       	breq	.-8      	; 0x598 <main+0x18>
		{
			switch (button)
 5a0:	80 91 df 02 	lds	r24, 0x02DF
 5a4:	90 91 e0 02 	lds	r25, 0x02E0
 5a8:	85 31       	cpi	r24, 0x15	; 21
 5aa:	91 05       	cpc	r25, r1
 5ac:	a8 f7       	brcc	.-22     	; 0x598 <main+0x18>
 5ae:	fc 01       	movw	r30, r24
 5b0:	ee 58       	subi	r30, 0x8E	; 142
 5b2:	ff 4f       	sbci	r31, 0xFF	; 255
 5b4:	08 c2       	rjmp	.+1040   	; 0x9c6 <__tablejump2__>
			{
				case 0:
				{
					LCD_HOME_POS();
 5b6:	b5 d1       	rcall	.+874    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("Ready yo!!");
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	c6 d1       	rcall	.+908    	; 0x94a <LCD_PRINT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5be:	2f ef       	ldi	r18, 0xFF	; 255
 5c0:	8f e7       	ldi	r24, 0x7F	; 127
 5c2:	94 e0       	ldi	r25, 0x04	; 4
 5c4:	21 50       	subi	r18, 0x01	; 1
 5c6:	80 40       	sbci	r24, 0x00	; 0
 5c8:	90 40       	sbci	r25, 0x00	; 0
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <main+0x44>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <main+0x4e>
 5ce:	00 00       	nop
					_delay_ms(100);
					Move_Stop();
 5d0:	40 de       	rcall	.-896    	; 0x252 <Move_Stop>
					servo_stop();
 5d2:	27 de       	rcall	.-946    	; 0x222 <servo_stop>
					actuator1_stop();
 5d4:	68 de       	rcall	.-816    	; 0x2a6 <actuator1_stop>
					actuator2_stop();
 5d6:	89 de       	rcall	.-750    	; 0x2ea <actuator2_stop>
					gripper_stop();
 5d8:	a0 de       	rcall	.-704    	; 0x31a <gripper_stop>
					stop_bomb_clutch();
 5da:	d2 de       	rcall	.-604    	; 0x380 <stop_bomb_clutch>
					stop_wrist_rotate();
 5dc:	ff de       	rcall	.-514    	; 0x3dc <stop_wrist_rotate>
					stop_wrist_ud();
 5de:	1a df       	rcall	.-460    	; 0x414 <stop_wrist_ud>
					data_rxd_flag=0;
 5e0:	10 92 d6 02 	sts	0x02D6, r1
					break;
 5e4:	d9 cf       	rjmp	.-78     	; 0x598 <main+0x18>
				}
				case 1:
				{
					LCD_HOME_POS();
 5e6:	9d d1       	rcall	.+826    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("forward");
 5e8:	8b e0       	ldi	r24, 0x0B	; 11
 5ea:	92 e0       	ldi	r25, 0x02	; 2
 5ec:	ae d1       	rcall	.+860    	; 0x94a <LCD_PRINT>
 5ee:	2f ef       	ldi	r18, 0xFF	; 255
 5f0:	8f e7       	ldi	r24, 0x7F	; 127
 5f2:	94 e0       	ldi	r25, 0x04	; 4
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	80 40       	sbci	r24, 0x00	; 0
 5f8:	90 40       	sbci	r25, 0x00	; 0
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <main+0x74>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <main+0x7e>
 5fe:	00 00       	nop
					_delay_ms(100);
					Move_Front();
 600:	18 de       	rcall	.-976    	; 0x232 <Move_Front>
					data_rxd_flag=0;
 602:	10 92 d6 02 	sts	0x02D6, r1
					break;
 606:	c8 cf       	rjmp	.-112    	; 0x598 <main+0x18>
				}
				case 2:
				{
					LCD_HOME_POS();
 608:	8c d1       	rcall	.+792    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("backward");
 60a:	83 e1       	ldi	r24, 0x13	; 19
 60c:	92 e0       	ldi	r25, 0x02	; 2
 60e:	9d d1       	rcall	.+826    	; 0x94a <LCD_PRINT>
 610:	2f ef       	ldi	r18, 0xFF	; 255
 612:	8f e7       	ldi	r24, 0x7F	; 127
 614:	94 e0       	ldi	r25, 0x04	; 4
 616:	21 50       	subi	r18, 0x01	; 1
 618:	80 40       	sbci	r24, 0x00	; 0
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x96>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0xa0>
 620:	00 00       	nop
					_delay_ms(100);
					Move_Back();
 622:	13 de       	rcall	.-986    	; 0x24a <Move_Back>
					data_rxd_flag=0;
 624:	10 92 d6 02 	sts	0x02D6, r1
					break;
 628:	b7 cf       	rjmp	.-146    	; 0x598 <main+0x18>
				}
				case 3: 
				{
					LCD_HOME_POS();
 62a:	7b d1       	rcall	.+758    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("right");
 62c:	8d e2       	ldi	r24, 0x2D	; 45
 62e:	92 e0       	ldi	r25, 0x02	; 2
 630:	8c d1       	rcall	.+792    	; 0x94a <LCD_PRINT>
 632:	2f ef       	ldi	r18, 0xFF	; 255
 634:	8f e7       	ldi	r24, 0x7F	; 127
 636:	94 e0       	ldi	r25, 0x04	; 4
 638:	21 50       	subi	r18, 0x01	; 1
 63a:	80 40       	sbci	r24, 0x00	; 0
 63c:	90 40       	sbci	r25, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <main+0xb8>
 640:	00 c0       	rjmp	.+0      	; 0x642 <main+0xc2>
 642:	00 00       	nop
					_delay_ms(100);
					Move_Right();
 644:	fa dd       	rcall	.-1036   	; 0x23a <Move_Right>
					data_rxd_flag=0;
 646:	10 92 d6 02 	sts	0x02D6, r1
					break;
 64a:	a6 cf       	rjmp	.-180    	; 0x598 <main+0x18>
				}
				case 4:
				{
					LCD_HOME_POS();
 64c:	6a d1       	rcall	.+724    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("left");
 64e:	82 e2       	ldi	r24, 0x22	; 34
 650:	92 e0       	ldi	r25, 0x02	; 2
 652:	7b d1       	rcall	.+758    	; 0x94a <LCD_PRINT>
 654:	2f ef       	ldi	r18, 0xFF	; 255
 656:	8f e7       	ldi	r24, 0x7F	; 127
 658:	94 e0       	ldi	r25, 0x04	; 4
 65a:	21 50       	subi	r18, 0x01	; 1
 65c:	80 40       	sbci	r24, 0x00	; 0
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <main+0xda>
 662:	00 c0       	rjmp	.+0      	; 0x664 <main+0xe4>
 664:	00 00       	nop
					_delay_ms(100);
					Move_Left();
 666:	ed dd       	rcall	.-1062   	; 0x242 <Move_Left>
					data_rxd_flag=0;
 668:	10 92 d6 02 	sts	0x02D6, r1
					break;
 66c:	95 cf       	rjmp	.-214    	; 0x598 <main+0x18>
				}
				case 5: 
				{
					LCD_HOME_POS();
 66e:	59 d1       	rcall	.+690    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("servo left");
 670:	8c e1       	ldi	r24, 0x1C	; 28
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	6a d1       	rcall	.+724    	; 0x94a <LCD_PRINT>
 676:	2f ef       	ldi	r18, 0xFF	; 255
 678:	8f e7       	ldi	r24, 0x7F	; 127
 67a:	94 e0       	ldi	r25, 0x04	; 4
 67c:	21 50       	subi	r18, 0x01	; 1
 67e:	80 40       	sbci	r24, 0x00	; 0
 680:	90 40       	sbci	r25, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <main+0xfc>
 684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x106>
 686:	00 00       	nop
					_delay_ms(100);
					servo_left();
 688:	c2 dd       	rcall	.-1148   	; 0x20e <servo_left>
					data_rxd_flag=0;
 68a:	10 92 d6 02 	sts	0x02D6, r1
					break;
 68e:	84 cf       	rjmp	.-248    	; 0x598 <main+0x18>
				}
				case 6: 
				{ 
					LCD_HOME_POS();
 690:	48 d1       	rcall	.+656    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("servo right");
 692:	87 e2       	ldi	r24, 0x27	; 39
 694:	92 e0       	ldi	r25, 0x02	; 2
 696:	59 d1       	rcall	.+690    	; 0x94a <LCD_PRINT>
 698:	2f ef       	ldi	r18, 0xFF	; 255
 69a:	8f e7       	ldi	r24, 0x7F	; 127
 69c:	94 e0       	ldi	r25, 0x04	; 4
 69e:	21 50       	subi	r18, 0x01	; 1
 6a0:	80 40       	sbci	r24, 0x00	; 0
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0x11e>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0x128>
 6a8:	00 00       	nop
					_delay_ms(100);
					servo_right();
 6aa:	a7 dd       	rcall	.-1202   	; 0x1fa <servo_right>
					data_rxd_flag=0;
 6ac:	10 92 d6 02 	sts	0x02D6, r1
					break;
 6b0:	73 cf       	rjmp	.-282    	; 0x598 <main+0x18>
				}
				case 7:
				{
						//For clutch of the gripper
						LCD_CLRSCR();
 6b2:	35 d1       	rcall	.+618    	; 0x91e <LCD_CLRSCR>
					LCD_HOME_POS();
 6b4:	36 d1       	rcall	.+620    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("Clutch open");
 6b6:	83 e3       	ldi	r24, 0x33	; 51
 6b8:	92 e0       	ldi	r25, 0x02	; 2
 6ba:	47 d1       	rcall	.+654    	; 0x94a <LCD_PRINT>
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	8f e7       	ldi	r24, 0x7F	; 127
 6c0:	94 e0       	ldi	r25, 0x04	; 4
 6c2:	21 50       	subi	r18, 0x01	; 1
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0x142>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x14c>
 6cc:	00 00       	nop
					_delay_ms(100);
					gripper_clutch_open();
 6ce:	1b de       	rcall	.-970    	; 0x306 <gripper_clutch_open>
					data_rxd_flag=0;
 6d0:	10 92 d6 02 	sts	0x02D6, r1
					break;
 6d4:	61 cf       	rjmp	.-318    	; 0x598 <main+0x18>
				}
				case 8:
				{
					LCD_CLRSCR();
 6d6:	23 d1       	rcall	.+582    	; 0x91e <LCD_CLRSCR>
					LCD_HOME_POS();
 6d8:	24 d1       	rcall	.+584    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("Clutch close");
 6da:	8f e3       	ldi	r24, 0x3F	; 63
 6dc:	92 e0       	ldi	r25, 0x02	; 2
 6de:	35 d1       	rcall	.+618    	; 0x94a <LCD_PRINT>
 6e0:	2f ef       	ldi	r18, 0xFF	; 255
 6e2:	8f e7       	ldi	r24, 0x7F	; 127
 6e4:	94 e0       	ldi	r25, 0x04	; 4
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	80 40       	sbci	r24, 0x00	; 0
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x166>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x170>
 6f0:	00 00       	nop
					_delay_ms(100);
					gripper_clutch_close();
 6f2:	0e de       	rcall	.-996    	; 0x310 <gripper_clutch_close>
					data_rxd_flag=0;
 6f4:	10 92 d6 02 	sts	0x02D6, r1
					
					break;
 6f8:	4f cf       	rjmp	.-354    	; 0x598 <main+0x18>
				}
				case 9:
				{	//For Actuator UP
					LCD_HOME_POS();
 6fa:	13 d1       	rcall	.+550    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("Actuator 1 up");
 6fc:	8c e4       	ldi	r24, 0x4C	; 76
 6fe:	92 e0       	ldi	r25, 0x02	; 2
 700:	24 d1       	rcall	.+584    	; 0x94a <LCD_PRINT>
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	8f e7       	ldi	r24, 0x7F	; 127
 706:	94 e0       	ldi	r25, 0x04	; 4
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	80 40       	sbci	r24, 0x00	; 0
 70c:	90 40       	sbci	r25, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x188>
 710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x192>
 712:	00 00       	nop
					_delay_ms(100);
					actuator1_up();
 714:	b6 dd       	rcall	.-1172   	; 0x282 <actuator1_up>
					data_rxd_flag=0;
 716:	10 92 d6 02 	sts	0x02D6, r1
					break;
 71a:	3e cf       	rjmp	.-388    	; 0x598 <main+0x18>
				}
				case 10:
				{
					LCD_HOME_POS();
 71c:	02 d1       	rcall	.+516    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("Actuator 1 down");
 71e:	8a e5       	ldi	r24, 0x5A	; 90
 720:	92 e0       	ldi	r25, 0x02	; 2
 722:	13 d1       	rcall	.+550    	; 0x94a <LCD_PRINT>
 724:	2f ef       	ldi	r18, 0xFF	; 255
 726:	8f e7       	ldi	r24, 0x7F	; 127
 728:	94 e0       	ldi	r25, 0x04	; 4
 72a:	21 50       	subi	r18, 0x01	; 1
 72c:	80 40       	sbci	r24, 0x00	; 0
 72e:	90 40       	sbci	r25, 0x00	; 0
 730:	e1 f7       	brne	.-8      	; 0x72a <main+0x1aa>
 732:	00 c0       	rjmp	.+0      	; 0x734 <main+0x1b4>
 734:	00 00       	nop
					_delay_ms(100);
					actuator1_down();
 736:	ae dd       	rcall	.-1188   	; 0x294 <actuator1_down>
					data_rxd_flag=0;
 738:	10 92 d6 02 	sts	0x02D6, r1
					break;
 73c:	2d cf       	rjmp	.-422    	; 0x598 <main+0x18>
				}
				case 11:
				{
					LCD_HOME_POS();
 73e:	f1 d0       	rcall	.+482    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("Actuator 2 up");
 740:	8a e6       	ldi	r24, 0x6A	; 106
 742:	92 e0       	ldi	r25, 0x02	; 2
 744:	02 d1       	rcall	.+516    	; 0x94a <LCD_PRINT>
 746:	2f ef       	ldi	r18, 0xFF	; 255
 748:	8f e7       	ldi	r24, 0x7F	; 127
 74a:	94 e0       	ldi	r25, 0x04	; 4
 74c:	21 50       	subi	r18, 0x01	; 1
 74e:	80 40       	sbci	r24, 0x00	; 0
 750:	90 40       	sbci	r25, 0x00	; 0
 752:	e1 f7       	brne	.-8      	; 0x74c <main+0x1cc>
 754:	00 c0       	rjmp	.+0      	; 0x756 <main+0x1d6>
 756:	00 00       	nop
					_delay_ms(100);
					actuator2_up();
 758:	ac dd       	rcall	.-1192   	; 0x2b2 <actuator2_up>
					data_rxd_flag=0;
 75a:	10 92 d6 02 	sts	0x02D6, r1
					break;
 75e:	1c cf       	rjmp	.-456    	; 0x598 <main+0x18>
				}
				case 12:
				{
					LCD_HOME_POS();
 760:	e0 d0       	rcall	.+448    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("Actuator 2 down");
 762:	88 e7       	ldi	r24, 0x78	; 120
 764:	92 e0       	ldi	r25, 0x02	; 2
 766:	f1 d0       	rcall	.+482    	; 0x94a <LCD_PRINT>
 768:	2f ef       	ldi	r18, 0xFF	; 255
 76a:	8f e7       	ldi	r24, 0x7F	; 127
 76c:	94 e0       	ldi	r25, 0x04	; 4
 76e:	21 50       	subi	r18, 0x01	; 1
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0x1ee>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x1f8>
 778:	00 00       	nop
					_delay_ms(100);
					actuator2_down();
 77a:	a9 dd       	rcall	.-1198   	; 0x2ce <actuator2_down>
					data_rxd_flag=0;
 77c:	10 92 d6 02 	sts	0x02D6, r1
					break;
 780:	0b cf       	rjmp	.-490    	; 0x598 <main+0x18>
				}
				case 13:
				{
					LCD_HOME_POS();
 782:	cf d0       	rcall	.+414    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("bomb clutch open");
 784:	88 e8       	ldi	r24, 0x88	; 136
 786:	92 e0       	ldi	r25, 0x02	; 2
 788:	e0 d0       	rcall	.+448    	; 0x94a <LCD_PRINT>
 78a:	2f ef       	ldi	r18, 0xFF	; 255
 78c:	8f e7       	ldi	r24, 0x7F	; 127
 78e:	94 e0       	ldi	r25, 0x04	; 4
 790:	21 50       	subi	r18, 0x01	; 1
 792:	80 40       	sbci	r24, 0x00	; 0
 794:	90 40       	sbci	r25, 0x00	; 0
 796:	e1 f7       	brne	.-8      	; 0x790 <main+0x210>
 798:	00 c0       	rjmp	.+0      	; 0x79a <main+0x21a>
 79a:	00 00       	nop
					_delay_ms(100);
					bomb_clutch_open();
 79c:	d5 dd       	rcall	.-1110   	; 0x348 <bomb_clutch_open>
					data_rxd_flag=0;
 79e:	10 92 d6 02 	sts	0x02D6, r1
					break;
 7a2:	fa ce       	rjmp	.-524    	; 0x598 <main+0x18>
				}
				case 14:
				{
					LCD_HOME_POS();
 7a4:	be d0       	rcall	.+380    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("bomb clutch close");
 7a6:	89 e9       	ldi	r24, 0x99	; 153
 7a8:	92 e0       	ldi	r25, 0x02	; 2
 7aa:	cf d0       	rcall	.+414    	; 0x94a <LCD_PRINT>
 7ac:	2f ef       	ldi	r18, 0xFF	; 255
 7ae:	8f e7       	ldi	r24, 0x7F	; 127
 7b0:	94 e0       	ldi	r25, 0x04	; 4
 7b2:	21 50       	subi	r18, 0x01	; 1
 7b4:	80 40       	sbci	r24, 0x00	; 0
 7b6:	90 40       	sbci	r25, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <main+0x232>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <main+0x23c>
 7bc:	00 00       	nop
					_delay_ms(100);
					bomb_clutch_close();
 7be:	d2 dd       	rcall	.-1116   	; 0x364 <bomb_clutch_close>
					data_rxd_flag=0;
 7c0:	10 92 d6 02 	sts	0x02D6, r1
					break;
 7c4:	e9 ce       	rjmp	.-558    	; 0x598 <main+0x18>
					break;
				}
				
				case 17:
				{
					LCD_HOME_POS();
 7c6:	ad d0       	rcall	.+346    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("wrist up");
 7c8:	8b ea       	ldi	r24, 0xAB	; 171
 7ca:	92 e0       	ldi	r25, 0x02	; 2
 7cc:	be d0       	rcall	.+380    	; 0x94a <LCD_PRINT>
 7ce:	2f ef       	ldi	r18, 0xFF	; 255
 7d0:	8f e7       	ldi	r24, 0x7F	; 127
 7d2:	94 e0       	ldi	r25, 0x04	; 4
 7d4:	21 50       	subi	r18, 0x01	; 1
 7d6:	80 40       	sbci	r24, 0x00	; 0
 7d8:	90 40       	sbci	r25, 0x00	; 0
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <main+0x254>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <main+0x25e>
 7de:	00 00       	nop
					_delay_ms(100);
					wrist_up();
 7e0:	00 de       	rcall	.-1024   	; 0x3e2 <wrist_up>
					data_rxd_flag=0;
 7e2:	10 92 d6 02 	sts	0x02D6, r1
					break;
 7e6:	d8 ce       	rjmp	.-592    	; 0x598 <main+0x18>
				}
				
				case 18:
				{
					LCD_HOME_POS();
 7e8:	9c d0       	rcall	.+312    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("wrist down");
 7ea:	84 eb       	ldi	r24, 0xB4	; 180
 7ec:	92 e0       	ldi	r25, 0x02	; 2
 7ee:	ad d0       	rcall	.+346    	; 0x94a <LCD_PRINT>
 7f0:	2f ef       	ldi	r18, 0xFF	; 255
 7f2:	8f e7       	ldi	r24, 0x7F	; 127
 7f4:	94 e0       	ldi	r25, 0x04	; 4
 7f6:	21 50       	subi	r18, 0x01	; 1
 7f8:	80 40       	sbci	r24, 0x00	; 0
 7fa:	90 40       	sbci	r25, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x276>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <main+0x280>
 800:	00 00       	nop
					_delay_ms(100);
					wrist_down();
 802:	fa dd       	rcall	.-1036   	; 0x3f8 <wrist_down>
					data_rxd_flag=0;	
 804:	10 92 d6 02 	sts	0x02D6, r1
					break;
 808:	c7 ce       	rjmp	.-626    	; 0x598 <main+0x18>
				}
				
				case 19:
				{
					LCD_HOME_POS();
 80a:	8b d0       	rcall	.+278    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("wrist CCW");
 80c:	8f eb       	ldi	r24, 0xBF	; 191
 80e:	92 e0       	ldi	r25, 0x02	; 2
 810:	9c d0       	rcall	.+312    	; 0x94a <LCD_PRINT>
 812:	2f ef       	ldi	r18, 0xFF	; 255
 814:	8f e7       	ldi	r24, 0x7F	; 127
 816:	94 e0       	ldi	r25, 0x04	; 4
 818:	21 50       	subi	r18, 0x01	; 1
 81a:	80 40       	sbci	r24, 0x00	; 0
 81c:	90 40       	sbci	r25, 0x00	; 0
 81e:	e1 f7       	brne	.-8      	; 0x818 <main+0x298>
 820:	00 c0       	rjmp	.+0      	; 0x822 <main+0x2a2>
 822:	00 00       	nop
					_delay_ms(100);
					rotate_wrist_ccw();
 824:	d6 dd       	rcall	.-1108   	; 0x3d2 <rotate_wrist_ccw>
					data_rxd_flag=0;
 826:	10 92 d6 02 	sts	0x02D6, r1
					break;
 82a:	b6 ce       	rjmp	.-660    	; 0x598 <main+0x18>
				}
				
				case 20:
				{
					LCD_HOME_POS();
 82c:	7a d0       	rcall	.+244    	; 0x922 <LCD_HOME_POS>
					LCD_PRINT("wrist CW");
 82e:	89 ec       	ldi	r24, 0xC9	; 201
 830:	92 e0       	ldi	r25, 0x02	; 2
 832:	8b d0       	rcall	.+278    	; 0x94a <LCD_PRINT>
 834:	2f ef       	ldi	r18, 0xFF	; 255
 836:	8f e7       	ldi	r24, 0x7F	; 127
 838:	94 e0       	ldi	r25, 0x04	; 4
 83a:	21 50       	subi	r18, 0x01	; 1
 83c:	80 40       	sbci	r24, 0x00	; 0
 83e:	90 40       	sbci	r25, 0x00	; 0
 840:	e1 f7       	brne	.-8      	; 0x83a <main+0x2ba>
 842:	00 c0       	rjmp	.+0      	; 0x844 <main+0x2c4>
 844:	00 00       	nop
					_delay_ms(100);
					rotate_wrist_cw();
 846:	c0 dd       	rcall	.-1152   	; 0x3c8 <rotate_wrist_cw>
					data_rxd_flag=0;
 848:	10 92 d6 02 	sts	0x02D6, r1
					break;
 84c:	a5 ce       	rjmp	.-694    	; 0x598 <main+0x18>

0000084e <toggle_e>:
/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 84e:	42 9a       	sbi	0x08, 2	; 8
 850:	00 c0       	rjmp	.+0      	; 0x852 <toggle_e+0x4>
 852:	42 98       	cbi	0x08, 2	; 8
 854:	08 95       	ret

00000856 <lcd_write>:
 856:	cf 93       	push	r28
 858:	c8 2f       	mov	r28, r24
 85a:	66 23       	and	r22, r22
 85c:	11 f0       	breq	.+4      	; 0x862 <lcd_write+0xc>
 85e:	40 9a       	sbi	0x08, 0	; 8
 860:	01 c0       	rjmp	.+2      	; 0x864 <lcd_write+0xe>
 862:	40 98       	cbi	0x08, 0	; 8
 864:	41 98       	cbi	0x08, 1	; 8
 866:	3c 9a       	sbi	0x07, 4	; 7
 868:	3d 9a       	sbi	0x07, 5	; 7
 86a:	3e 9a       	sbi	0x07, 6	; 7
 86c:	3f 9a       	sbi	0x07, 7	; 7
 86e:	47 98       	cbi	0x08, 7	; 8
 870:	46 98       	cbi	0x08, 6	; 8
 872:	45 98       	cbi	0x08, 5	; 8
 874:	44 98       	cbi	0x08, 4	; 8
 876:	cc 23       	and	r28, r28
 878:	0c f4       	brge	.+2      	; 0x87c <lcd_write+0x26>
 87a:	47 9a       	sbi	0x08, 7	; 8
 87c:	c6 fd       	sbrc	r28, 6
 87e:	46 9a       	sbi	0x08, 6	; 8
 880:	c5 fd       	sbrc	r28, 5
 882:	45 9a       	sbi	0x08, 5	; 8
 884:	c4 fd       	sbrc	r28, 4
 886:	44 9a       	sbi	0x08, 4	; 8
 888:	e2 df       	rcall	.-60     	; 0x84e <toggle_e>
 88a:	47 98       	cbi	0x08, 7	; 8
 88c:	46 98       	cbi	0x08, 6	; 8
 88e:	45 98       	cbi	0x08, 5	; 8
 890:	44 98       	cbi	0x08, 4	; 8
 892:	c3 fd       	sbrc	r28, 3
 894:	47 9a       	sbi	0x08, 7	; 8
 896:	c2 fd       	sbrc	r28, 2
 898:	46 9a       	sbi	0x08, 6	; 8
 89a:	c1 fd       	sbrc	r28, 1
 89c:	45 9a       	sbi	0x08, 5	; 8
 89e:	c0 fd       	sbrc	r28, 0
 8a0:	44 9a       	sbi	0x08, 4	; 8
 8a2:	d5 df       	rcall	.-86     	; 0x84e <toggle_e>
 8a4:	44 9a       	sbi	0x08, 4	; 8
 8a6:	45 9a       	sbi	0x08, 5	; 8
 8a8:	46 9a       	sbi	0x08, 6	; 8
 8aa:	47 9a       	sbi	0x08, 7	; 8
 8ac:	cf 91       	pop	r28
 8ae:	08 95       	ret

000008b0 <lcd_read>:
 8b0:	88 23       	and	r24, r24
 8b2:	11 f0       	breq	.+4      	; 0x8b8 <lcd_read+0x8>
 8b4:	40 9a       	sbi	0x08, 0	; 8
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <lcd_read+0xa>
 8b8:	40 98       	cbi	0x08, 0	; 8
 8ba:	41 9a       	sbi	0x08, 1	; 8
 8bc:	3c 98       	cbi	0x07, 4	; 7
 8be:	3d 98       	cbi	0x07, 5	; 7
 8c0:	3e 98       	cbi	0x07, 6	; 7
 8c2:	3f 98       	cbi	0x07, 7	; 7
 8c4:	42 9a       	sbi	0x08, 2	; 8
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <lcd_read+0x18>
 8c8:	34 99       	sbic	0x06, 4	; 6
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <lcd_read+0x20>
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <lcd_read+0x22>
 8d0:	80 e1       	ldi	r24, 0x10	; 16
 8d2:	35 99       	sbic	0x06, 5	; 6
 8d4:	80 62       	ori	r24, 0x20	; 32
 8d6:	36 99       	sbic	0x06, 6	; 6
 8d8:	80 64       	ori	r24, 0x40	; 64
 8da:	37 99       	sbic	0x06, 7	; 6
 8dc:	80 68       	ori	r24, 0x80	; 128
 8de:	42 98       	cbi	0x08, 2	; 8
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <lcd_read+0x32>
 8e2:	42 9a       	sbi	0x08, 2	; 8
 8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <lcd_read+0x36>
 8e6:	34 99       	sbic	0x06, 4	; 6
 8e8:	81 60       	ori	r24, 0x01	; 1
 8ea:	35 99       	sbic	0x06, 5	; 6
 8ec:	82 60       	ori	r24, 0x02	; 2
 8ee:	36 99       	sbic	0x06, 6	; 6
 8f0:	84 60       	ori	r24, 0x04	; 4
 8f2:	37 99       	sbic	0x06, 7	; 6
 8f4:	88 60       	ori	r24, 0x08	; 8
 8f6:	42 98       	cbi	0x08, 2	; 8
 8f8:	08 95       	ret

000008fa <lcd_waitbusy>:
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	d9 df       	rcall	.-78     	; 0x8b0 <lcd_read>
 8fe:	88 23       	and	r24, r24
 900:	e4 f3       	brlt	.-8      	; 0x8fa <lcd_waitbusy>
 902:	88 e0       	ldi	r24, 0x08	; 8
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	01 97       	sbiw	r24, 0x01	; 1
 908:	f1 f7       	brne	.-4      	; 0x906 <lcd_waitbusy+0xc>
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	d1 cf       	rjmp	.-94     	; 0x8b0 <lcd_read>

0000090e <lcd_command>:
 90e:	cf 93       	push	r28
 910:	c8 2f       	mov	r28, r24
 912:	f3 df       	rcall	.-26     	; 0x8fa <lcd_waitbusy>
 914:	60 e0       	ldi	r22, 0x00	; 0
 916:	8c 2f       	mov	r24, r28
 918:	9e df       	rcall	.-196    	; 0x856 <lcd_write>
 91a:	cf 91       	pop	r28
 91c:	08 95       	ret

0000091e <LCD_CLRSCR>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void LCD_CLRSCR(void)
{
    lcd_command(1<<LCD_CLR);
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	f6 cf       	rjmp	.-20     	; 0x90e <lcd_command>

00000922 <LCD_HOME_POS>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void LCD_HOME_POS(void)
{
    lcd_command(1<<LCD_HOME);
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	f4 cf       	rjmp	.-24     	; 0x90e <lcd_command>

00000926 <LCD_PUTC>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void LCD_PUTC(char c)
{
 926:	cf 93       	push	r28
 928:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 92a:	e7 df       	rcall	.-50     	; 0x8fa <lcd_waitbusy>
    if (c=='\n')
 92c:	ca 30       	cpi	r28, 0x0A	; 10
 92e:	41 f4       	brne	.+16     	; 0x940 <LCD_PUTC+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 930:	80 34       	cpi	r24, 0x40	; 64
 932:	10 f4       	brcc	.+4      	; 0x938 <LCD_PUTC+0x12>
        addressCounter = LCD_START_LINE2;
 934:	80 e4       	ldi	r24, 0x40	; 64
 936:	01 c0       	rjmp	.+2      	; 0x93a <LCD_PUTC+0x14>
    else
        addressCounter = LCD_START_LINE1;
 938:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 93a:	80 58       	subi	r24, 0x80	; 128
 93c:	e8 df       	rcall	.-48     	; 0x90e <lcd_command>
 93e:	03 c0       	rjmp	.+6      	; 0x946 <LCD_PUTC+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 940:	61 e0       	ldi	r22, 0x01	; 1
 942:	8c 2f       	mov	r24, r28
 944:	88 df       	rcall	.-240    	; 0x856 <lcd_write>
    }

}/* LCD_PUTC */
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <LCD_PRINT>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void LCD_PRINT(const char *s)
/* print string on lcd (no auto linefeed) */
{
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 94e:	ec 01       	movw	r28, r24
 950:	89 91       	ld	r24, Y+
 952:	88 23       	and	r24, r24
 954:	21 f0       	breq	.+8      	; 0x95e <LCD_PRINT+0x14>
        LCD_PUTC(c);
 956:	e7 df       	rcall	.-50     	; 0x926 <LCD_PUTC>
void LCD_PRINT(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 958:	89 91       	ld	r24, Y+
 95a:	81 11       	cpse	r24, r1
 95c:	fc cf       	rjmp	.-8      	; 0x956 <LCD_PRINT+0xc>
        LCD_PUTC(c);
    }

}/* LCD_PRINT */
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	08 95       	ret

00000964 <LCD_INIT>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void LCD_INIT(uint8_t dispAttr)
{
 964:	1f 93       	push	r17
 966:	cf 93       	push	r28
 968:	df 93       	push	r29
 96a:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 96c:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 96e:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 970:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 972:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 974:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 976:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 978:	3f 9a       	sbi	0x07, 7	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 97a:	e0 e0       	ldi	r30, 0x00	; 0
 97c:	fa ef       	ldi	r31, 0xFA	; 250
 97e:	31 97       	sbiw	r30, 0x01	; 1
 980:	f1 f7       	brne	.-4      	; 0x97e <LCD_INIT+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 982:	45 9a       	sbi	0x08, 5	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 984:	44 9a       	sbi	0x08, 4	; 8
    lcd_e_toggle();
 986:	63 df       	rcall	.-314    	; 0x84e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 988:	e0 e0       	ldi	r30, 0x00	; 0
 98a:	fe e4       	ldi	r31, 0x4E	; 78
 98c:	31 97       	sbiw	r30, 0x01	; 1
 98e:	f1 f7       	brne	.-4      	; 0x98c <LCD_INIT+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 990:	5e df       	rcall	.-324    	; 0x84e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 992:	c0 e0       	ldi	r28, 0x00	; 0
 994:	d1 e0       	ldi	r29, 0x01	; 1
 996:	fe 01       	movw	r30, r28
 998:	31 97       	sbiw	r30, 0x01	; 1
 99a:	f1 f7       	brne	.-4      	; 0x998 <LCD_INIT+0x34>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 99c:	58 df       	rcall	.-336    	; 0x84e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 99e:	fe 01       	movw	r30, r28
 9a0:	31 97       	sbiw	r30, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <LCD_INIT+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 9a4:	44 98       	cbi	0x08, 4	; 8
    lcd_e_toggle();
 9a6:	53 df       	rcall	.-346    	; 0x84e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 9a8:	21 97       	sbiw	r28, 0x01	; 1
 9aa:	f1 f7       	brne	.-4      	; 0x9a8 <LCD_INIT+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 9ac:	88 e2       	ldi	r24, 0x28	; 40
 9ae:	af df       	rcall	.-162    	; 0x90e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 9b0:	88 e0       	ldi	r24, 0x08	; 8
 9b2:	ad df       	rcall	.-166    	; 0x90e <lcd_command>
    LCD_CLRSCR();                           /* display clear                */ 
 9b4:	b4 df       	rcall	.-152    	; 0x91e <LCD_CLRSCR>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 9b6:	86 e0       	ldi	r24, 0x06	; 6
 9b8:	aa df       	rcall	.-172    	; 0x90e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 9ba:	81 2f       	mov	r24, r17
 9bc:	a8 df       	rcall	.-176    	; 0x90e <lcd_command>

}/* LCD_INIT */
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	08 95       	ret

000009c6 <__tablejump2__>:
 9c6:	ee 0f       	add	r30, r30
 9c8:	ff 1f       	adc	r31, r31

000009ca <__tablejump__>:
 9ca:	05 90       	lpm	r0, Z+
 9cc:	f4 91       	lpm	r31, Z
 9ce:	e0 2d       	mov	r30, r0
 9d0:	19 94       	eijmp

000009d2 <_exit>:
 9d2:	f8 94       	cli

000009d4 <__stop_program>:
 9d4:	ff cf       	rjmp	.-2      	; 0x9d4 <__stop_program>
